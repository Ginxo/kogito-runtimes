@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7-priority'
    }
    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk1.8'
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'master')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    // def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH
                    def currentBranch = "BXMSPROD-1115"
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def pipelineHelper = new PipelineHelper(this)
                    pipelineHelper.retry(
                    {
                        def SETTINGS_XML_ID = "5d9884a1-178a-4d67-a3ac-9735d2df2cef"
                        def projectCollection = ["kogito-runtimes", "optaplanner", "kogito-apps", "kogito-examples"]
                        def projectVariableMap = []
                        def additionalVariables = get7XBranchProjectVariables()
                        pmebuild.buildProjects(projectCollection, "${SETTINGS_XML_ID}", "$WORKSPACE/build_config/kogito/nightly", "${env.PME_CLI_PATH}", projectVariableMap, additionalVariables, [:])
                    }, 2, 480*60)
                }
            }
        }
        stage('Generate Properties Files') {
            steps {
                script {
                    println "TODO"
                }
            }
        }
        stage('Upload Files to repository') {
            steps {
                script {
                    println "TODO"
                }
            }
        }
        stage ("Send UMB Message to QE.") {
            steps {
                script {
                    println "TODO"
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}

def get7XBranchProjectVariables() {
    def result = [:]
    dir("droolsjbpm-build-bootstrap") {
        def changeAuthor = env.CHANGE_AUTHOR ?: env.ghprbPullAuthorLogin
        def changeBranch = env.CHANGE_BRANCH ?: env.ghprbSourceBranch
        def changeTarget = env.CHANGE_TARGET ?: env.ghprbTargetBranch
        def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH

        println "Checking out droolsjbpm-build-bootstrap project to get 7.x branch project list"
        githubscm.checkoutIfExists('droolsjbpm-build-bootstrap', "${changeAuthor}", "${changeBranch}", 'kiegroup', "${changeTarget}")
        def branched7RepositoryListPath = "./script/branched-7-repository-list.txt"
        if ('master' == currentBranch) {
            def branched7RepositoryListFile = readFile branched7RepositoryListPath
            branched7RepositoryListFile.readLines().each { result["${it}-scmRevision"] = '7.x' }
        }
        println "Checking out droolsjbpm-build-bootstrap project to get 7.x branch project list"
    }
    println "[INFO] get7XBranchProjectVariables result ${result}"
    return result
}