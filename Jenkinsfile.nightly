@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem24g && !master'
    }
    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'master')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
        string(description: 'The optaplanner product version', name: 'OPTAPLANNER_PRODUCT_VERSION')
    }
    environment {
        BRANCH_NAME = "master"
        CHANGE_TARGET = "master"
        CHANGE_BRANCH = "master"
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    //def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH
                    def currentBranch = "BXMSPROD-1115"
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def pipelineHelper = new PipelineHelper(this)
                    pipelineHelper.retry(
                    {
                        def SETTINGS_XML_ID = "5d9884a1-178a-4d67-a3ac-9735d2df2cef"
                        def projectCollection = ["kogito-runtimes", "optaplanner", "kogito-apps", "kogito-examples"]
                        def projectVariableMap = [:]
                        def additionalVariables = ["optaplannerProductVersion": env.OPTAPLANNER_PRODUCT_VERSION]
                        configFileProvider([configFile(fileId: "49737697-ebd6-4396-9c22-11f7714808eb", variable: 'PRODUCTION_PROJECT_LIST')]) {
                            pmebuild.buildProjects(projectCollection, "${SETTINGS_XML_ID}", "$WORKSPACE/build_config/kogito/nightly", "${env.PME_CLI_PATH}", projectVariableMap, additionalVariables, [:])
                        }
                    }, 2, 480*60)
                }
            }
        }
        stage('Generate Properties Files') {
            steps {
                script {
                    println "TODO"
                }
            }
        }
        stage('Upload Files to repository') {
            steps {
                script {
                    println "TODO"
                }
            }
        }
        stage ("Send UMB Message to QE.") {
            steps {
                script {
                    println "TODO"
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}